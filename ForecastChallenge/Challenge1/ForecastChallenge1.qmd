---
title: "Forecasting Challenge #1"
author: "Griffin Shelor"
format: pdf
---


### Loading packages
```{r}
#| output: FALSE
## Loading packages
library(pacman)
pacman::p_load(tidyverse, here, rstan, shinystan, bayesplot, randomForest, caret, ranger, tseries, astsa, forecast, stlplus, fpp)
## reading in data
sm_2013 <- read_csv(here("UNR-EcoForecast-main", "data", "Forecasting1", "2013_data.csv"))
colnames(sm_2013) <- c("Index", "Date", "SoilMoisture")
WeatherData <- read_csv(here("UNR-EcoForecast-main", "data", "Forecasting1", "WeatherData_tidy.csv"))
Weather_2013 <- WeatherData |>
  filter(Year == 2013)|>
  filter(YearDay < 277)
SMwx2013_data <- merge(sm_2013, Weather_2013, by = "Date")
SMwx2013_data$Date <- as_date(SMwx2013_data$Date, format = "%m/%d/%y")
```


```{r}
## plotting data
plot(SMwx2013_data$Air_TempC_Max, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Air_TempC_Min, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Air_TempC_Avg, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Solar_Incoming_Total, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Ppt_mm_Tot, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Relative_Humidity_Max, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Relative_Humidity_Min, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$Wind_speed_Max, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_5cm_Avg, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_20cm_Avg, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_5cm_Max, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_5cm_Min, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_20cm_Max, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$SoilTemp_20cm_Min, SMwx2013_data$SoilMoisture)
plot(SMwx2013_data$YearDay, SMwx2013_data$SoilMoisture)
```

```{r}
## looking at time series of moisture
## converting to time series object
sm_ts <- ts(SMwx2013_data$SoilMoisture, frequency = 7)

## decomposing time series object
fit_add <- decompose(sm_ts, type = "additive")
plot(fit_add)

fit_mult <- decompose(sm_ts, type = "multiplicative")
plot(fit_mult)

weekly_sm_means <- tapply(sm_ts, cycle(sm_ts), FUN=mean)
plot(weekly_sm_means,type="o")

## creating lag plots
lag.plot(sm_ts, lags=15, do.lines=FALSE)

## looking at autocorrelation
acf(sm_ts)
pacf(sm_ts)
```
## splitting data up into training data and testing data
```{r}
## splitting last 30 days of 2013 soil moisture data off for testing, using rest of data before that for training
data_2013_train <- SMwx2013_data |>
  filter(YearDay < 247)
data_2013_test <- SMwx2013_data |>
  filter(YearDay >= 247)
```


## fuck it, I'm trying a ranger (random forest) model
```{r}
## using ranger package
set.seed(802)
ranger_mod <- ranger(formula = SoilMoisture ~ Air_TempC_Max + Air_TempC_Min + Air_TempC_Avg + Solar_Incoming_Total + Ppt_mm_Tot + Relative_Humidity_Max + Relative_Humidity_Min + Wind_speed_Max + WndSpeed_Avg + WinDir_Avg + WinDir_Std_Dev + SoilTemp_5cm_Avg + SoilTemp_20cm_Avg + Dewpoint_Avg + SoilTemp_5cm_Max + SoilTemp_5cm_Min + SoilTemp_20cm_Max + SoilTemp_20cm_Min, data = data_2013_train, num.trees = 10000, mtry = 3, importance = "impurity", quantreg = TRUE)
set.seed(802)
ranger_mod_v2 <- ranger(formula = SoilMoisture ~ SoilTemp_20cm_Avg + SoilTemp_20cm_Min + SoilTemp_5cm_Max + SoilTemp_20cm_Max + Air_TempC_Avg + Dewpoint_Avg, data = data_2013_train, num.trees = 10000, mtry = 3, importance = "impurity", quantreg = TRUE)
set.seed(802)
ranger_mod_v3 <- ranger(formula = SoilMoisture ~ SoilTemp_20cm_Avg + SoilTemp_20cm_Min + SoilTemp_5cm_Max + SoilTemp_20cm_Max + Air_TempC_Avg, data = data_2013_train, num.trees = 10000, mtry = 3, importance = "impurity", quantreg = TRUE)
set.seed(802)
ranger_mod_v4 <- ranger(formula = SoilMoisture ~ SoilTemp_20cm_Avg + SoilTemp_20cm_Min + SoilTemp_5cm_Max + SoilTemp_20cm_Max, data = data_2013_train, num.trees = 10000, mtry = 3, importance = "impurity", quantreg = TRUE)
## using random forest package
# set.seed(802)
# RF_mod <- randomForest(formula = SoilMoisture ~ Ppt_mm_Tot + Air_TempC_Avg + Air_TempC_Max + Relative_Humidity_Max + SoilTemp_5cm_Max + SoilTemp_20cm_Max + Solar_Incoming_Total + Relative_Humidity_Min, data = data_2013_train, num.trees = 10000, mtry = 2)
# set.seed(802)
# RF_mod_v2 <- randomForest(formula = SoilMoisture ~ Air_TempC_Avg + SoilTemp_5cm_Max + SoilTemp_20cm_Max, data = data_2013_train, num.trees = 1000, mtry = 2)

## printing and plotting models
# print(ranger_mod)
importance(ranger_mod)
# importance(ranger_mod_v2)
# print(RF_mod)
# print(RF_mod_v2)
# plot(RF_mod)
# plot(RF_mod_v2)
# varImpPlot(RF_mod)
# varImpPlot(RF_mod_v2)

## creating predictions
## quantiles for ranger predictions
quants <- c(0.1, 0.5, 0.9)
set.seed(802)
ranger_pred <- predict(ranger_mod, data = data_2013_test, type = "quantiles", quantiles = quants)
set.seed(802)
ranger_pred_v2 <- predict(ranger_mod_v2, data = data_2013_test, type = "quantiles", quantiles = quants)
set.seed(802)
ranger_pred_v3 <- predict(ranger_mod_v3, data = data_2013_test, type = "quantiles", quantiles = quants)
set.seed(802)
ranger_pred_v4 <- predict(ranger_mod_v4, data = data_2013_test, type = "quantiles", quantiles = quants)
set.seed(802)
# RF_pred <- predict(RF_mod, newdata = data_2013_test)
set.seed(802)
# RF_pred_v2 <- predict(RF_mod_v2, newdata = data_2013_test)
rangerpredictions <- predictions(ranger_pred)
rangerpredictions_v2 <- predictions(ranger_pred_v2)
rangerpredictions_v3 <- predictions(ranger_pred_v3)
rangerpredictions_v4 <- predictions(ranger_pred_v4)
plot(1:30, data_2013_test$SoilMoisture, col = 'black', ylim = c(0.1,0.35))
points(rangerpredictions[,2], col = 'red')
lines(rangerpredictions[,1], col = 'red')
lines(rangerpredictions[,3], col = 'red')
points(rangerpredictions_v2[,2], pch = 2, col = 'darkgreen')
lines(rangerpredictions_v2[,1], col = 'darkgreen')
lines(rangerpredictions_v2[,3], col = 'darkgreen')
points(rangerpredictions_v3[,2], pch = 2, col = 'darkblue')
lines(rangerpredictions_v3[,1], col = 'darkblue')
lines(rangerpredictions_v3[,3], col = 'darkblue')
points(rangerpredictions_v4[,2], pch = 2, col = 'orange')
lines(rangerpredictions_v4[,1], col = 'orange')
lines(rangerpredictions_v4[,3], col = 'orange')
# points(RF_pred, pch = 14, col = 'green')
# points(RF_pred_v2, col = 'black')

```
## Stan model 1
```{r}
## making list of data to declare what goes into stan model
train_rows <- nrow(data_2013_train)
model1_datalist <- list(N = nrow(data_2013_train) -1, y = data_2013_train$SoilMoisture[-1], x1 = data_2013_train$SoilMoisture[-train_rows], x2 = data_2013_train$Air_TempC_Max[-train_rows], x3 = data_2013_train$Air_TempC_Min[-train_rows], x4 = data_2013_train$Air_TempC_Avg[-train_rows], x5 = data_2013_train$Solar_Incoming_Total[-train_rows], x6 = data_2013_train$Ppt_mm_Tot[-train_rows], x7 = data_2013_train$Relative_Humidity_Max[-train_rows], x8 = data_2013_train$Relative_Humidity_Min[-train_rows], x9 = data_2013_train$Wind_speed_Max[-train_rows], x10 = data_2013_train$WndSpeed_Avg[-train_rows], x11 = data_2013_train$WinDir_Avg[-train_rows], x12 = data_2013_train$WinDir_Std_Dev[-train_rows], x13 = data_2013_train$SoilTemp_5cm_Avg[-train_rows], x14 = data_2013_train$SoilTemp_20cm_Avg[-train_rows], x15 = data_2013_train$Dewpoint_Avg[-train_rows], x16 = data_2013_train$SoilTemp_5cm_Max[-train_rows], x17 = data_2013_train$SoilTemp_5cm_Min[-train_rows], x18 = data_2013_train$SoilTemp_20cm_Max[-train_rows], x19 = data_2013_train$SoilTemp_20cm_Min[-train_rows])

## fitting stan model
set.seed(802)
model1_fit <- stan(file=here("ForecastChallenge", "Challenge1", "FC1Model1.stan"),data = model1_datalist, chains = 4, iter = 10000, warmup = 2000)
model1_fit
```

```{r}
## launching shinystan
launch_shinystan(model1_fit)
```

